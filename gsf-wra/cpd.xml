<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="49" tokens="302">
<file line="48" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/url/WraPagePreviewReference.java"/>
<file line="97" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/url/WraPageReference.java"/>
<codefragment>
<![CDATA[
        if (getSatelliteContext() == SatelliteContext.SATELLITE_SERVER && isGetTemplateUrl(args)) {
            AssetId id = new AssetIdImpl((String) args.get("c"), Long.parseLong((String) args.get("cid")));
            AssetApiVirtualWebrootDao vwDao = new AssetApiVirtualWebrootDao(ics);
            WraCoreFieldDao wraDao = new AssetApiWraCoreFieldDao(ics);
            String currentEnvironment = vwDao.getVirtualWebrootEnvironment();
            // only look up webroots for WRAs when the environment is configured
            if (currentEnvironment != null && wraDao.isVanityAsset(id)) {
                 VanityAsset wra = wraDao.getVanityWra(id);
                // get the webroot
                VirtualWebroot vw = vwDao.lookupVirtualWebrootForAsset(wra);
                if (vw != null) {
                    // set the special fields
                    args.put("virtual-webroot", vw.getEnvironmentVirtualWebroot());
                    args.put("url-path", wra.getPath().substring(vw.getMasterVirtualWebroot().length()));
                    // has pagename been set? if not, use default.
                    String pagename = ics.GetProperty(WraPathAssembler.DISPATCHER_PROPNAME,
                            "ServletRequest.properties", true);
                    if (!goodString(pagename)) {
                        pagename = GST_DISPATCHER;
                    }
                    // pagename or wrapperpage depending on whether or not we're
                    // going to use a wrapper.
                    if (args.get(PubConstants.WRAPPERPAGE) != null)
                        args.put(PubConstants.WRAPPERPAGE, pagename);
                    else
                        args.put("pagename", pagename);
                } else {
                    if (log.isDebugEnabled()) {
                        log.debug("Not adding WRAPathAssembler args because no matching virtual webroot found for path "
                                + wra.getPath() + " and environemnt " + currentEnvironment);
                    }
                }
            } else {
                if (log.isDebugEnabled()) {
                    if (currentEnvironment == null) {
                        log.debug("Not adding WraPathAssembler args because virtual webroot environment is not configured");
                    } else {
                        log.debug("Not adding WraPathAssembler args because asset " + id + " is not web referenceable.");
                    }
                }
            }
        } else {
            if (log.isDebugEnabled()) {
                log.debug("Not adding WRAPathAssembler args because context is not satellite server (it is "
                        + getSatelliteContext() + ").  Args: " + args);
            }
        }
        super.setParameters(args, ics);
    }
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="286">
<file line="88" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/controller/AbstractController.java"/>
<file line="80" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/controller/RenderPageAdapter.java"/>
<codefragment>
<![CDATA[
    }

    protected final String sendError(final int code, final Exception e) {
        LOG.debug(code + " status code sent due to exception " + e.toString(), e);
        if (LOG.isTraceEnabled()) {
            DebugHelper.dumpVars(ics, LOG);
        }
        switch (code) { // all the http status codes, we may restrict the list
            // to error and redirect
            case HttpServletResponse.SC_ACCEPTED:
            case HttpServletResponse.SC_BAD_GATEWAY:
            case HttpServletResponse.SC_BAD_REQUEST:
            case HttpServletResponse.SC_CONFLICT:
            case HttpServletResponse.SC_CONTINUE:
            case HttpServletResponse.SC_CREATED:
            case HttpServletResponse.SC_EXPECTATION_FAILED:
            case HttpServletResponse.SC_FORBIDDEN:
            case HttpServletResponse.SC_FOUND:
            case HttpServletResponse.SC_GATEWAY_TIMEOUT:
            case HttpServletResponse.SC_GONE:
            case HttpServletResponse.SC_HTTP_VERSION_NOT_SUPPORTED:
            case HttpServletResponse.SC_INTERNAL_SERVER_ERROR:
            case HttpServletResponse.SC_LENGTH_REQUIRED:
            case HttpServletResponse.SC_METHOD_NOT_ALLOWED:
            case HttpServletResponse.SC_MOVED_PERMANENTLY:
                // case HttpServletResponse.SC_MOVED_TEMPORARILY : //SC_FOUND is
                // preferred
            case HttpServletResponse.SC_MULTIPLE_CHOICES:
            case HttpServletResponse.SC_NO_CONTENT:
            case HttpServletResponse.SC_NON_AUTHORITATIVE_INFORMATION:
            case HttpServletResponse.SC_NOT_ACCEPTABLE:
            case HttpServletResponse.SC_NOT_FOUND:
            case HttpServletResponse.SC_NOT_IMPLEMENTED:
            case HttpServletResponse.SC_NOT_MODIFIED:
            case HttpServletResponse.SC_OK:
            case HttpServletResponse.SC_PARTIAL_CONTENT:
            case HttpServletResponse.SC_PAYMENT_REQUIRED:
            case HttpServletResponse.SC_PRECONDITION_FAILED:
            case HttpServletResponse.SC_PROXY_AUTHENTICATION_REQUIRED:
            case HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE:
            case HttpServletResponse.SC_REQUEST_TIMEOUT:
            case HttpServletResponse.SC_REQUEST_URI_TOO_LONG:
            case HttpServletResponse.SC_REQUESTED_RANGE_NOT_SATISFIABLE:
            case HttpServletResponse.SC_RESET_CONTENT:
            case HttpServletResponse.SC_SEE_OTHER:
            case HttpServletResponse.SC_SERVICE_UNAVAILABLE:
            case HttpServletResponse.SC_SWITCHING_PROTOCOLS:
            case HttpServletResponse.SC_TEMPORARY_REDIRECT:
            case HttpServletResponse.SC_UNAUTHORIZED:
            case HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE:
            case HttpServletResponse.SC_USE_PROXY:
                ics.StreamHeader(STATUS_HEADER, Integer.toString(code));
                break;
            default:
                ics.StreamHeader(STATUS_HEADER, "500");
                break;
        }
        Unknowndeps.unknonwDeps(ics);// failure case might be corrected on next
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="193">
<file line="137" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/vwebroot/AssetApiVirtualWebrootDao.java"/>
<file line="133" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/vwebroot/VirtualWebrootApiBypassDao.java"/>
<codefragment>
<![CDATA[
            LOG.trace("WRA does ont have a path set - cannot locate virtual webroot");
            return null;
        }
        String env = getVirtualWebrootEnvironment();
        if (env == null)
            return null;
        for (VirtualWebroot vw : getAllVirtualWebroots()) {
            // find longest first one that is found in the prefix of path. that
            // is virtual-webroot
            // the path in the asset must start with the MASTER virtual webroot
            // for this to work. This could
            // be loosened up but there is no real reason to right now.
            if (env.equals(vw.getEnvironmentName()) && wraPath.startsWith(vw.getMasterVirtualWebroot())) {
                return vw;
            }
        }
        return null; // no match
    }

    /**
     * Comparator that compares virtual webroots by webroot. Uses
     * reverse-natural ordering to ensure that overlapping virtual webroots
     * resolve properly.
     */
    public static class UrlInfoComparator implements Comparator<VirtualWebroot> {

        public int compare(VirtualWebroot o1, VirtualWebroot o2) {
            int i = -o1.getMasterVirtualWebroot().compareTo(o2.getMasterVirtualWebroot());
            if (i == 0) {
                int j = -o1.getEnvironmentName().compareTo(o2.getEnvironmentName());
                if (j == 0) {
                    int k = -o1.getEnvironmentVirtualWebroot().compareTo(o2.getEnvironmentVirtualWebroot());
                    if (k == 0) {
                        return (int) (o1.getId().getId() - o2.getId().getId());
                    }
                    return k;
                }
                return j;
            }
            return i;
        }
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="168">
<file line="86" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/vwebroot/AssetApiVirtualWebrootDao.java"/>
<file line="82" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/vwebroot/VirtualWebrootApiBypassDao.java"/>
<codefragment>
<![CDATA[
        return result;
    }

    /**
     * Get the current virtual webroot environment as defined by the
     * configuration properties. Null indicates that none is configured.
     * 
     * @return virtual webroot environment or null if not set.
     */
    public String getVirtualWebrootEnvironment() {
        String environmentName = System.getProperty("com.fatwire.gst.foundation.env-name", null);

        // avoid configuration problem trickery
        if (environmentName != null) {
            environmentName = environmentName.trim();
            if (environmentName.length() == 0)
                environmentName = null;
        }

        if (environmentName == null) {
            // allow user to have accidentally mis-configured things
            environmentName = ics.GetProperty("com.fatwire.gst.foundation.env-name");
            // avoid configuration problem trickery
            if (environmentName != null) {
                environmentName = environmentName.trim();
                if (environmentName.length() == 0)
                    environmentName = null;
            }
        }
        if (environmentName == null)
            LOG.debug("Virtual webroot environment is not configured.");
        return environmentName;
    }

    /**
     * Look up and return the VirtualWebroot corresponding to the specified
     * VanityAsset, for the current environment. If the current
     * environment is not configured, no match can be found.
     * 
     * @param wra web-referenceable asset
     * @return matching VirtualWebroot or null if no match is found.
     */
    public VirtualWebroot lookupVirtualWebrootForAsset(VanityAsset wra) {
        if (LOG.isDebugEnabled())
            LOG.debug("Looking up virtual webroot for WRA " + wra.getId());
        String wraPath = wra.getPath();
        return lookupVirtualWebrootForUri(wraPath);
    }

    public VirtualWebroot lookupVirtualWebrootForUri(String wraPath) {
        if (wraPath == null) {
            LOG.trace("WRA does ont have a path set - cannot locate virtual webroot");
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="156">
<file line="235" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/AssetApiAliasCoreFieldDao.java"/>
<file line="156" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/AssetApiWraCoreFieldDao.java"/>
<codefragment>
<![CDATA[
        }

    };

    private static final String ASSETPUBLICATION_QRY = "SELECT p.name from Publication p, AssetPublication ap "
            + "WHERE ap.assettype = ? " + "AND ap.assetid = ? " + "AND ap.pubid=p.id";
    static final PreparedStmt AP_STMT = new PreparedStmt(ASSETPUBLICATION_QRY,
            Collections.singletonList("AssetPublication")); // todo: low
                                                            // priority:
    // determine
    // why publication
    // cannot fit there.

    static {
        AP_STMT.setElement(0, "AssetPublication", "assettype");
        AP_STMT.setElement(1, "AssetPublication", "assetid");
    }

    public String resolveSite(String c, String cid) {
        final StatementParam param = AP_STMT.newParam();
        param.setString(0, c);
        param.setLong(1, Long.parseLong(cid));
        String result = null;
        for (Row pubid : SqlHelper.select(ics, AP_STMT, param)) {
            if (result != null) {
                LOG.warn("Found asset "
                        + c
                        + ":"
                        + cid
                        + " in more than one publication. It should not be shared; aliases are to be used for cross-site sharing.  Controller will use first site found: "
                        + result);
            } else {
                result = pubid.getString("name");
            }
        }
        return result;
    }
]]>
</codefragment>
</duplication>
<duplication lines="80" tokens="141">
<file line="44" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/navigation/NavNode.java"/>
<file line="41" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/navigation/NavNode2.java"/>
<codefragment>
<![CDATA[
    public void addChild(final NavNode2 child) {
        if (child != null) {
            children.add(child);
        }
    }

    /**
     * @return the page
     */
    public AssetId getPage() {
        return page;
    }

    /**
     * @param page the page to set
     */
    public void setPage(final AssetId page) {
        this.page = page;
    }

    /**
     * @return the level
     */
    public int getLevel() {
        return level;
    }

    /**
     * @param level the level to set
     */
    public void setLevel(final int level) {
        this.level = level;
    }

    /**
     * @return the pagesubtype
     */
    public String getPagesubtype() {
        return pagesubtype;
    }

    /**
     * @param pagesubtype the pagesubtype to set
     */
    public void setPagesubtype(final String pagesubtype) {
        this.pagesubtype = pagesubtype;
    }

    /**
     * @return the pagename
     */
    public String getPagename() {
        return pagename;
    }

    /**
     * @param pagename the pagename to set
     */
    public void setPagename(final String pagename) {
        this.pagename = pagename;
    }

    /**
     * @return the id
     */
    public AssetId getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(final AssetId id) {
        this.id = id;
    }

    /**
     * @return the children
     */
    public List<NavNode2> getChildren() {
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="124">
<file line="350" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/navigation/NavigationHelper.java"/>
<file line="201" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/navigation/NavigationHelper2.java"/>
<codefragment>
<![CDATA[
        }

        /**
         * Get the URL for the alias.
         * 
         * For external links, the targeturl attribute is rendered.
         * 
         * For Aliases that refer to another WRA, the alias is allowed to
         * override any WRA fields. For instance, the path, and the template can
         * be overridden by an alias for a WRA (though the template in the Alias
         * had better be typeless, or a template of the same name must exist in
         * the WRA's asset type or there will be a problem).
         * 
         * @param alias Alias bean, which of course is also a WRA.
         * @return url
         */
        protected String getUrlForAlias(final Alias alias) {
            if (alias.getTargetUrl() != null) {
                return alias.getTargetUrl();
            } else {
                return getUrlForWra(alias);
            }
        }

        /**
         * Get the URL to use for the web-referenceable asset.
         * 
         * @param wra WebReferenceableAsset bean
         * @return url
         */
        protected String getUrlForWra(final VanityAsset wra) {
            if (wra.getTemplate() == null || wra.getTemplate().length() == 0) {
                LOG.warn("Asset " + wra + " does not have a valid template set.");
                return null;
            }
            String wrapper = ics.GetProperty("com.fatwire.gst.foundation.url.wrapathassembler.dispatcher",
                    "ServletRequest.properties", true);
            if (!Utilities.goodString(wrapper)) {
                wrapper = "GST/Dispatcher";
            }
            return new WraUriBuilder(wra, wrapper).toURI(ics);

        }
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="123">
<file line="123" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/url/db/UrlRegistryDaoImpl.java"/>
<file line="203" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/url/db/UrlRegistryDaoImpl.java"/>
<codefragment>
<![CDATA[
        final VanityUrl url = new VanityUrl();
        url.setId(row.getLong(ID));
        url.setAssetid(row.getLong(ASSETID));
        url.setAssettype(row.getString(ASSETTYPE));
        url.setPath(row.getString(PATH));
        url.setStartdate(row.getDate(STARTDATE));
        url.setEnddate(row.getDate(ENDDATE));
        url.setOpt_depth(Integer.parseInt(row.getString(OPT_DEPTH)));
        url.setOpt_vwebroot(row.getString(OPT_VWEBROOT));
        url.setOpt_url_path(row.getString(OPT_URL_PATH));
        url.setOpt_site(row.getString(OPT_SITE));
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="122">
<file line="274" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/navigation/NavigationHelper.java"/>
<file line="82" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/navigation/NavigationHelper2.java"/>
<codefragment>
<![CDATA[
    protected NavNode2 getSitePlan(final int depth, final AssetId pageId, final int level,
            final DimensionFilterInstance dimensionFilter) {
        // check the start/end date of the page asset
        LogDep.logDep(ics, pageId);
        if (!isValidOnDate(ics, pageId, assetEffectiveDate)) {
            // the input object is not valid. Abort
            if (LOG.isDebugEnabled()) {
                LOG.debug("Input asset " + pageId + " is not effective on " + assetEffectiveDate);
            }
            return null;
        }

        // determine if it's a wra, a placeholder or an alias

        final AssetData pageData = AssetDataUtils.getAssetData(ics, pageId, "subtype", "name");
        final String subtype = AttributeDataUtils.asString(pageData.getAttributeData("subtype"));
        final String name = AttributeDataUtils.asString(pageData.getAttributeData("name"));
        final boolean isNavigationPlaceholder = NAVBAR_NAME.equals(subtype);
        final NavNode2 node = new NavNode2();
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="122">
<file line="63" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/VanityAssetBean.java"/>
<file line="61" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/WraBeanImpl.java"/>
<codefragment>
<![CDATA[
        endDate = wra.getEndDate();
    }

    public AssetId getId() {
        return id;
    }

    public void setId(AssetId id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getSubtype() {
        return subtype;
    }

    public void setSubtype(String subtype) {
        this.subtype = subtype;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMetaTitle() {
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="119">
<file line="104" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/VanityAssetBean.java"/>
<file line="142" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/WraBeanImpl.java"/>
<codefragment>
<![CDATA[
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public String getTemplate() {
        return template;
    }

    public void setTemplate(String template) {
        this.template = template;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String toString() {
        return (getId() != null) ? getId().toString() : "[null id]";
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="118">
<file line="132" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/WraCoreFieldApiBypassDao.java"/>
<file line="164" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/WraCoreFieldApiBypassDao.java"/>
<codefragment>
<![CDATA[
                            + "metatitle,metadescription,metakeyword,h1title,linktext FROM " + id.getType()
                            + " WHERE id = ?", Collections.singletonList(id.getType()));
            basicFields.setElement(0, id.getType(), "id");

            final StatementParam param = basicFields.newParam();
            param.setLong(0, id.getId());
            final Row row = SqlHelper.selectSingle(ics, basicFields, param);

            final WraBeanImpl wra = new WraBeanImpl();
            wra.setId(id);
            wra.setName(row.getString("name"));
            wra.setDescription(row.getString("description"));
            wra.setSubtype(row.getString("subtype"));
            wra.setMetaTitle(row.getString("metatitle"));
]]>
</codefragment>
</duplication>
<duplication lines="9" tokens="107">
<file line="123" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/AssetApiWraCoreFieldDao.java"/>
<file line="145" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/wra/AssetApiWraCoreFieldDao.java"/>
<codefragment>
<![CDATA[
            VanityAssetBean wra = new VanityAssetBean();
            wra.setId(data.getAssetId());
            wra.setName(AttributeDataUtils.getWithFallback(data, "name"));
            wra.setDescription(AttributeDataUtils.asString(data.getAttributeData("description")));
            wra.setSubtype(AttributeDataUtils.asString(data.getAttributeData("subtype")));
            wra.setStatus(AttributeDataUtils.asString(data.getAttributeData("status")));
            wra.setStartDate(AttributeDataUtils.asDate(data.getAttributeData("startdate")));
            wra.setEndDate(AttributeDataUtils.asDate(data.getAttributeData("enddate")));
            wra.setPath(AttributeDataUtils.asString(data.getAttributeData("path")));
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="103">
<file line="155" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/controller/AbstractController.java"/>
<file line="153" path="/home/dolf/code/java/gst-foundation.git/gsf-wra/src/main/java/com/fatwire/gst/foundation/controller/RenderPageAdapter.java"/>
<codefragment>
<![CDATA[
        String element = null;

        if (goodString(ics.GetVar("site")) && ics.IsElement(ics.GetVar("site") + "/ErrorHandler/" + code)) {
            element = ics.GetVar("site") + "/ErrorHandler/" + code;
        } else if (ics.IsElement("GST/ErrorHandler/" + code)) {
            element = "GST/ErrorHandler/" + code;
        } else if (ics.IsElement("GST/ErrorHandler")) {
            element = "GST/ErrorHandler";
        }
        if (element != null) {
            ics.SetObj("com.fatwire.gst.foundation.exception", e);
            ics.CallElement(element, null);
]]>
</codefragment>
</duplication>
</pmd-cpd>